// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using projekat.Database;

#nullable disable

namespace projekat.Migrations
{
    [DbContext(typeof(TransactionDBContext))]
    partial class TransactionDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("projekat.Database.Entities.CategoryEntity", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("projekat.Database.Entities.SplitEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("CatCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CatCode");

                    b.HasIndex("TransactionId");

                    b.ToTable("split", (string)null);
                });

            modelBuilder.Entity("projekat.Database.Entities.TransactionEntity", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<double>("amount")
                        .HasColumnType("double precision");

                    b.Property<string>("beneficiaryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("catCode")
                        .HasColumnType("text");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<char>("direction")
                        .HasColumnType("character(1)");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("mcc")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("transaction", (string)null);
                });

            modelBuilder.Entity("projekat.Database.Entities.SplitEntity", b =>
                {
                    b.HasOne("projekat.Database.Entities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CatCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projekat.Database.Entities.TransactionEntity", "Transaction")
                        .WithMany("split")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("projekat.Database.Entities.TransactionEntity", b =>
                {
                    b.Navigation("split");
                });
#pragma warning restore 612, 618
        }
    }
}
